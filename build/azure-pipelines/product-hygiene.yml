steps:
  - task: NodeTool@0
    inputs:
      versionSpec: "12.x"

  - task: AzureKeyVault@1
    displayName: "Azure Key Vault: Get Secrets"
    inputs:
      azureSubscription: "vscode-builds-subscription"
      KeyVaultName: vscode

  - script: |
      set -e
      cat << EOF > ~/.netrc
      machine github.com
      login vscode
      password $(github-distro-mixin-password)
      EOF

      git config user.email "vscode@microsoft.com"
      git config user.name "VSCode"
    displayName: Prepare tooling

  - script: |
      set -e
      git pull --no-rebase https://github.com/$(VSCODE_MIXIN_REPO).git $(node -p "require('./package.json').distro")
    displayName: Merge distro

  - script: |
      npx https://aka.ms/enablesecurefeed standAlone
    displayName: Switch to Terrapin packages
    timeoutInMinutes: 5
    condition: and(succeeded(), eq(variables['ENABLE_TERRAPIN'], 'true'))

  - script: |
      mkdir -p .build
      echo -n $(VSCODE_ARCH) > .build/arch
      echo -n $ENABLE_TERRAPIN > .build/terrapin
    displayName: Prepare yarn cache flags

  - task: Cache@2
    inputs:
      key: 'nodeModules | $(Agent.OS) | .build/arch, .build/terrapin, build/.cachesalt, .yarnrc, remote/.yarnrc, **/yarn.lock, !**/node_modules/**/yarn.lock, !**/.*/**/yarn.lock'
      path: .build/node_modules_cache
      cacheHitVar: NODE_MODULES_RESTORED
    displayName: Cache yarn download folder

  - script: |
      set -e
      tar --use-compress-program zstd -xf .build/node_modules_cache/cache.tzst -C $BUILD_SOURCESDIRECTORY
      ls -al build/node_modules
    condition: and(succeeded(), eq(variables.NODE_MODULES_RESTORED, 'true'))


  # - task: 1ESLighthouseEng.PipelineArtifactCaching.RestoreCacheV1.RestoreCache@1
  #   inputs:
  #     keyfile: ".build/arch, .build/terrapin, build/.cachesalt, .yarnrc, remote/.yarnrc, **/yarn.lock, !**/node_modules/**/yarn.lock, !**/.*/**/yarn.lock"
  #     targetfolder: "**/node_modules, !**/node_modules/**/node_modules"
  #     vstsFeed: "npm-vscode"

  - script: |
      set -e
      cd build
      yarn --frozen-lockfile && break
    env:
      ELECTRON_SKIP_BINARY_DOWNLOAD: 1
      PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1
    displayName: Install dependencies
    condition: and(succeeded(), ne(variables.NODE_MODULES_RESTORED, 'true'))

  - script: |
      set -e
      node build/azure-pipelines/common/listNodeModules.js > .build/node_modules_list.txt
      cat .build/node_modules_list.txt
      mkdir -p .build/node_modules_cache
      tar --posix --use-compress-program zstd -cf .build/node_modules_cache/cache.tzst -P -C $BUILD_SOURCESDIRECTORY --verbatim-files-from .build/node_modules_list.txt
      ls -al .build/node_modules_cache
    condition: and(succeeded(), ne(variables.NODE_MODULES_RESTORED, 'true'))

  # # Mixin must run before optimize, because the CSS loader will inline small SVGs
  # - script: |
  #     set -e
  #     node build/azure-pipelines/mixin
  #   displayName: Mix in quality

  # - script: |
  #     set -e
  #     yarn gulp hygiene
  #   # yarn monaco-compile-check
  #   # yarn valid-layers-check
  #   displayName: Run hygiene, monaco compile & valid layers checks
  #   condition: and(succeeded(), eq(variables['VSCODE_STEP_ON_IT'], 'false'))

  # - script: |
  #     set -
  #     ./build/azure-pipelines/common/extract-telemetry.sh
  #   displayName: Extract Telemetry
  #   condition: and(succeeded(), ne(variables['VSCODE_PUBLISH'], 'false'))

  # - script: |
  #     set -e
  #     AZURE_WEBVIEW_STORAGE_ACCESS_KEY="$(vscode-webview-storage-key)" \
  #     ./build/azure-pipelines/common/publish-webview.sh
  #   displayName: Publish Webview
  #   condition: and(succeeded(), ne(variables['VSCODE_PUBLISH'], 'false'))
